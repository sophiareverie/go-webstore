package templates

import (
    "go-store/types"
)

templ Products(Products []types.Product) {
    <!DOCTYPE html>
    <head>
      <style>
        .container {
            display: flex;
        }
        .form-container {
            display: flex;
            flex-direction: column;
            gap: 5px; 
            max-width: 700px;
        }
        .column {
            flex: 1;
            padding: 10px;
        }

        .form-container .button-row {
            display: flex;
            justify-content: space-between;
            gap: 10px; 
            margin-top: 10px;
        }
        .form-container input {
            font-size: 16px; 
            height: 40px;
            width: 100%;
            padding: 8px;
            border: 1px grey solid;

        }
        .checkbox-container {
            display: inline-flex; 
            align-items: center; 
            margin-left: 8px; 
        }
        .checkbox-container input {
            height: 40px;
            width: 40px;
        }

        .form-container label[for="inactive"] {
            display: inline-block;
            width: 100%; 
            margin-right: 4px;
        }
        tbody tr:hover {
            background-color: yellow;
        }
        #delete {
            background-color: darkred;
            font-weight: bold;
        }
    </style>
    </head>  
        <div class="container">
            <div class="column left" id="productList">


            <h2>Products</h2>
            
            <table id="productTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>In Stock</th>
                        <th>Image</th>
                        <th>Price</th>
                        <th>Inactive</th>
                    </tr>
                </thead>
                <tbody id="productTableBody"></tbody> 

            </table>
            </div>

            <div class="column right">
                <main>
                <form id="productForm" hx-post="/product" hx-trigger="submit" hx-target="#productList" hx-swap="innerHTML">                    <fieldset>
                        <legend>Product Information</legend>
                        <div class="form-container">
                            <label for="itemName">Item Name*:</label>
                            <input type="text" id="itemName" name="itemName" required pattern="[A-Za-z\s']+"/>

                            <label for="itemImage">Item Image:</label>
                            <input type="text" id="itemImage" name="itemImage"/>

                            <label for="quantity">Quantity:</label>
                            <input type="number" id="quantity" name="quantity" min="0" max="100" />
                            
                            <label for="price">Price*:</label>
                            <input type="number" id="price" name="price" step="0.01" required />

                            <div class="checkbox-container">
                            <label for="inactive">Inactive:</label>
                            <input type="checkbox" id="inactive" />

                            <input type="hidden" id="productId" name="productId">

                            </div>

                            <div class="button-row">
                                <button type="submit" id="add" >Add Item</button>
                                <button type="submit" id="update" >Update</button>
                                <button type="submit" id="delete" >Delete</button>
                            </div>

                        </div>
                    </fieldset>
                </form>
            </main>
            </div>
        </div>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            fetchProducts(); 
        });

        function fetchProducts() {
            fetch("/product", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ action: "fetch" }) 
            })
            .then(response => response.json())
            .then(products => {
                updateProductList(products); 
            })
            .catch(error => console.error("Error fetching products:", error));
        }

       document.getElementById("productForm").addEventListener("submit", function(event) {
        event.preventDefault();

        if (event.submitter.id === "delete") {
            const confirmDelete = confirm("Are you sure you want to delete this item?");
            if (!confirmDelete) {
                return;
            }
        }

        if (!validateFields()) {
            return;
        }

        const formData = {
            productId: parseInt(document.getElementById("productId").value) || null, 
            itemName: document.getElementById("itemName").value,
            itemImage: document.getElementById("itemImage").value,
            quantity: parseInt(document.getElementById("quantity").value, 10) || 0,
            price: parseFloat(document.getElementById("price").value) || 0.0,
            inactive: document.getElementById("inactive").checked ? 1 : 0,
            action: event.submitter.id 
        };

        if(event.submitter.id !== "update"){
            fetch("/product-id", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    itemName: formData.itemName,
                    itemImage: formData.itemImage,
                    quantity: formData.quantity,
                    price: formData.price,
                    inactive: formData.inactive
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error && event.submitter.id !== "add") {
                    alert(data.error); 
                    return;
                }
                
                if (data.id || event.submitter.id === "add") {
                    formData.productId = data.id || null;
                    document.getElementById("productId").value = data.id || null;

                    return fetch("/product", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(formData)
                    });
                }
            })
            .then(response => {
                if (response) {
                    return response.json();
                }
            })
            .then(products => {
                if (products) {
                    updateProductList(products); 
                    clearForm(); 
                }
            })
            .catch(error => console.error("Error:", error));
        } else {
            fetch("/product", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(products => {
                updateProductList(products);
                clearForm();
            })
            .catch(error => console.error("Error:", error));
        }
    });

    function validateFields() {
        const itemName = document.getElementById("itemName");
        const price = document.getElementById("price");

        if (!itemName.value.trim()) {
            alert("Item Name must not be blank");
            itemName.focus();
            return false;
        }

        if (!price.value.trim()) {
            alert("Price must not be blank");
            price.focus();
            return false;
        }

        return true;
    }

    function clearForm() {
        document.getElementById("productForm").reset();
    }

    function updateProductList(products) {
        const tbody = document.querySelector("#productTableBody");
        tbody.innerHTML = ""; 

        products.products.forEach(product => {
            const row = document.createElement("tr");
            row.onclick = () => populateForm(product);

            row.innerHTML = `
                <td>${product.Name}</td>
                <td>${product.InStock}</td>
                <td>${product.Image}</td>
                <td>$${parseFloat(product.Price).toFixed(2)}</td>
                <td>${product.Inactive === 0 ? "No" : "Yes"}</td>
            `;

            tbody.appendChild(row);
        });
    }

    function populateForm(product) {
        document.getElementById("itemName").value = product.Name;
        document.getElementById("itemImage").value = product.Image;
        document.getElementById("quantity").value = product.InStock;
        document.getElementById("price").value = product.Price;
        document.getElementById("inactive").checked = product.Inactive === 1;

        fetch("/product-id", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                itemName: product.Name,
                itemImage: product.Image,
                quantity: product.InStock,
                price: product.Price,
                inactive: product.Inactive
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.id) {
                document.getElementById("productId").value = data.id;
            }
        })
        .catch(error => console.error("Error fetching product ID:", error));
    }
    </script>
}

