// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"go-store/types"
)

func Products(Products []types.Product) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><head><style>\n        .container {\n            display: flex;\n        }\n        .form-container {\n            display: flex;\n            flex-direction: column;\n            gap: 5px; \n            max-width: 700px;\n        }\n        .column {\n            flex: 1;\n            padding: 10px;\n        }\n\n        .form-container .button-row {\n            display: flex;\n            justify-content: space-between;\n            gap: 10px; \n            margin-top: 10px;\n        }\n        .form-container input {\n            font-size: 16px; \n            height: 40px;\n            width: 100%;\n            padding: 8px;\n            border: 1px grey solid;\n\n        }\n        .checkbox-container {\n            display: inline-flex; \n            align-items: center; \n            margin-left: 8px; \n        }\n        .checkbox-container input {\n            height: 40px;\n            width: 40px;\n        }\n\n        .form-container label[for=\"inactive\"] {\n            display: inline-block;\n            width: 100%; \n            margin-right: 4px;\n        }\n        tbody tr:hover {\n            background-color: yellow;\n        }\n        #delete {\n            background-color: darkred;\n            font-weight: bold;\n        }\n    </style></head><div class=\"container\"><div class=\"column left\" id=\"productList\"><h2>Products</h2><table id=\"productTable\"><thead><tr><th>Name</th><th>In Stock</th><th>Image</th><th>Price</th><th>Inactive</th></tr></thead> <tbody id=\"productTableBody\"></tbody></table></div><div class=\"column right\"><main><form id=\"productForm\" hx-post=\"/product\" hx-trigger=\"submit\" hx-target=\"#productList\" hx-swap=\"innerHTML\"><fieldset><legend>Product Information</legend><div class=\"form-container\"><label for=\"itemName\">Item Name*:</label> <input type=\"text\" id=\"itemName\" name=\"itemName\" required pattern=\"[A-Za-z\\s&#39;]+\"> <label for=\"itemImage\">Item Image:</label> <input type=\"text\" id=\"itemImage\" name=\"itemImage\"> <label for=\"quantity\">Quantity:</label> <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"0\" max=\"100\"> <label for=\"price\">Price*:</label> <input type=\"number\" id=\"price\" name=\"price\" step=\"0.01\" required><div class=\"checkbox-container\"><label for=\"inactive\">Inactive:</label> <input type=\"checkbox\" id=\"inactive\"> <input type=\"hidden\" id=\"productId\" name=\"productId\"></div><div class=\"button-row\"><button type=\"submit\" id=\"add\">Add Item</button> <button type=\"submit\" id=\"update\">Update</button> <button type=\"submit\" id=\"delete\">Delete</button></div></div></fieldset></form></main></div></div><script>\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            fetchProducts(); \n        });\n\n        function fetchProducts() {\n            fetch(\"/product\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({ action: \"fetch\" }) \n            })\n            .then(response => response.json())\n            .then(products => {\n                updateProductList(products); \n            })\n            .catch(error => console.error(\"Error fetching products:\", error));\n        }\n\n       document.getElementById(\"productForm\").addEventListener(\"submit\", function(event) {\n        event.preventDefault();\n\n        if (event.submitter.id === \"delete\") {\n            const confirmDelete = confirm(\"Are you sure you want to delete this item?\");\n            if (!confirmDelete) {\n                return;\n            }\n        }\n\n        if (!validateFields()) {\n            return;\n        }\n\n        const formData = {\n            productId: parseInt(document.getElementById(\"productId\").value) || null, \n            itemName: document.getElementById(\"itemName\").value,\n            itemImage: document.getElementById(\"itemImage\").value,\n            quantity: parseInt(document.getElementById(\"quantity\").value, 10) || 0,\n            price: parseFloat(document.getElementById(\"price\").value) || 0.0,\n            inactive: document.getElementById(\"inactive\").checked ? 1 : 0,\n            action: event.submitter.id \n        };\n\n        if(event.submitter.id !== \"update\"){\n            fetch(\"/product-id\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    itemName: formData.itemName,\n                    itemImage: formData.itemImage,\n                    quantity: formData.quantity,\n                    price: formData.price,\n                    inactive: formData.inactive\n                })\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.error && event.submitter.id !== \"add\") {\n                    alert(data.error); \n                    return;\n                }\n                \n                if (data.id || event.submitter.id === \"add\") {\n                    formData.productId = data.id || null;\n                    document.getElementById(\"productId\").value = data.id || null;\n\n                    return fetch(\"/product\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify(formData)\n                    });\n                }\n            })\n            .then(response => {\n                if (response) {\n                    return response.json();\n                }\n            })\n            .then(products => {\n                if (products) {\n                    updateProductList(products); \n                    clearForm(); \n                }\n            })\n            .catch(error => console.error(\"Error:\", error));\n        } else {\n            fetch(\"/product\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(formData)\n            })\n            .then(response => response.json())\n            .then(products => {\n                updateProductList(products);\n                clearForm();\n            })\n            .catch(error => console.error(\"Error:\", error));\n        }\n    });\n\n    function validateFields() {\n        const itemName = document.getElementById(\"itemName\");\n        const price = document.getElementById(\"price\");\n\n        if (!itemName.value.trim()) {\n            alert(\"Item Name must not be blank\");\n            itemName.focus();\n            return false;\n        }\n\n        if (!price.value.trim()) {\n            alert(\"Price must not be blank\");\n            price.focus();\n            return false;\n        }\n\n        return true;\n    }\n\n    function clearForm() {\n        document.getElementById(\"productForm\").reset();\n    }\n\n    function updateProductList(products) {\n        const tbody = document.querySelector(\"#productTableBody\");\n        tbody.innerHTML = \"\"; \n\n        products.products.forEach(product => {\n            const row = document.createElement(\"tr\");\n            row.onclick = () => populateForm(product);\n\n            row.innerHTML = `\n                <td>${product.Name}</td>\n                <td>${product.InStock}</td>\n                <td>${product.Image}</td>\n                <td>$${parseFloat(product.Price).toFixed(2)}</td>\n                <td>${product.Inactive === 0 ? \"No\" : \"Yes\"}</td>\n            `;\n\n            tbody.appendChild(row);\n        });\n    }\n\n    function populateForm(product) {\n        document.getElementById(\"itemName\").value = product.Name;\n        document.getElementById(\"itemImage\").value = product.Image;\n        document.getElementById(\"quantity\").value = product.InStock;\n        document.getElementById(\"price\").value = product.Price;\n        document.getElementById(\"inactive\").checked = product.Inactive === 1;\n\n        fetch(\"/product-id\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                itemName: product.Name,\n                itemImage: product.Image,\n                quantity: product.InStock,\n                price: product.Price,\n                inactive: product.Inactive\n            })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.id) {\n                document.getElementById(\"productId\").value = data.id;\n            }\n        })\n        .catch(error => console.error(\"Error fetching product ID:\", error));\n    }\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
