package templates

import (
    "fmt"
    "time"
    "go-store/types"
)

templ Store(Products []types.Product) {
    <!DOCTYPE html>
    <head>
        <link rel="stylesheet" href="../assets/styles/styles.css">
    </head>
    <body>
        <fieldset>
            <legend>Product Information</legend>
            <div class="form-container">
                <div class="form-fields">
                    <form action="/purchase" method="post"  onsubmit="trackPurchasedProduct()">
                        <label for="firstName">First Name*:</label>
                        <input type="text" id="firstName" name="firstName" required pattern="[A-Za-z\s']+" />

                        <label for="lastName">Last Name*:</label>
                        <input type="text" id="lastName" name="lastName" required pattern="[A-Za-z\s']+" />

                        <label for="email">Email*:</label>
                        <input type="email" id="email" name="email" required />

                        <label for="product">Product*:</label>
                        <select id="product" name="product" required onchange="showProductImage()">
                            <option value="">Select an item</option>
                            for _, product := range Products {
                                if (product.Inactive == 0) {
                                    <option value={ product.Name } data-image={ product.Image}> { product.Name } - { fmt.Sprintf("%.2f", product.Price) } </option>
                                }
                            }
                        </select>

                        <label for="quantity">Quantity*:</label>
                        <input type="number" id="quantity" name="quantity" min="1" max="100" required />
						<label>Would you like to round up for a donation?</label>
						<label>
							<input type="radio" name="donation" value="yes" /> Yes
						</label>
						<label>
							<input type="radio" name="donation" value="no" checked /> No
						</label>
                        <input type="hidden" name="timestamp" value={ fmt.Sprintf("%d", time.Now().Unix()) }/>

                        <button type="submit">Purchase</button>
                    </form>
                </div>
                <div class="product-image">
					<h3 id="productTitle">Select product to see image</h3> 
					<img id="productImage" src="" alt="Product image"  />
				</div>
            </div>
			

        </fieldset>
		
    </body>
    <script>

        window.onload = function() {
            deleteCookie("viewedItems");  
            deleteCookie("purchasedItem");  
        };

        function trackPurchasedProduct() {
            const productSelect = document.getElementById("product");
            const selectedProduct = productSelect.value; // Get the selected product name
            console.log(selectedProduct)

            if (selectedProduct) {
                setCookie("purchasedItem", selectedProduct, 7); // Set the purchased item in the cookie for 7 days
            }
        }

        function showProductImage() {
            const productSelect = document.getElementById("product");
            const productImage = document.getElementById("productImage");
            const selectedOption = productSelect.options[productSelect.selectedIndex];

            const product = selectedOption.getAttribute("data-image");

            if (product) {
                productImage.src = product;
                productImage.alt = product + " image";
                trackViewedProduct(productSelect.value);
            } else {
                productImage.src = "";
                productImage.alt = "Product image";
            }
            

        }

        function trackViewedProduct(product) {
            console.log(product)
            const viewedItems = getCookie("viewedItems") ? JSON.parse(decodeURIComponent(getCookie("viewedItems"))) : [];
            console.log(viewedItems)

            // Add item to the list only if not already there and not the default
            if (!viewedItems.includes(product)) {
                viewedItems.push(product);
                setCookie("viewedItems", encodeURIComponent(JSON.stringify(viewedItems)), 7); // Save to cookie
                console.log("Tracked viewed item:", viewedItems);
            }
        }


        // Set a cookie
        function setCookie(name, value, days) {
            const date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            document.cookie = `${name}=${value};expires=${date.toUTCString()};path=/`;
        }

        // Get a cookie
        function getCookie(name) {
            const cookies = document.cookie.split("; ");
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].split("=");
                if (cookie[0] === name) {
                    return cookie[1];
                }
            }
            return "";
        }

        // Function to delete a specific cookie by name
        function deleteCookie(name) {
            const date = new Date();
            date.setTime(date.getTime() - 1);  // Set the time to the past
            document.cookie = `${name}=;expires=${date.toUTCString()};path=/`;
        }





    </script>
}

